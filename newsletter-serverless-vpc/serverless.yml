service: newsletter-vpc

plugins:
  - serverless-vpc-plugin

build:
  esbuild:
    bundle: true
    packages: external
    minify: true # Minify the code

custom:
  vpcConfig:
    enabled: true
 
    cidrBlock: '10.0.0.0/16'

    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
    createNatGateway: false
 
    # When enabled, the DB subnet will only be accessible from the Application subnet
    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
    createNetworkAcl: false
 
    # Whether to create the DB subnet
    createDbSubnet: false
 
    # Whether to enable VPC flow logging to an S3 bucket
    createFlowLogs: false
 
    # Whether to create a bastion host
    createBastionHost: false
 
    # Whether to create a NAT instance
    createNatInstance: false
 
    # Whether to create AWS Systems Manager (SSM) Parameters
    createParameters: false
 
    # By default, S3 and DynamoDB endpoints will be available within the VPC
    # see https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
    # for a list of available service endpoints to provision within the VPC
    # (varies per region)
    services:
      - dynamodb
      - ssm
 
    # Optionally specify subnet groups to create. If not provided, subnet groups
    # for RDS, Redshift, ElasticCache and DAX will be provisioned.
    subnetGroups:
      - rds
 
    # Whether to export stack outputs so it may be consumed by other stacks
    exportOutputs: false

  SUBSCRIBERS_TABLE: ${self:service}-${self:provider.stage}-subscribers


package:
  individually: true  # Package individually per functions

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  tracing:
    lambda: true
    apiGateway: true

functions: # Your "Functions"
  subscribe:
    handler: src/subscribe.handler
    role: SubscribeRole
    events: # The "Events" that trigger this function
      - httpApi: 'POST /subscriber'
    environment:
      SUBSCRIBERS_TABLE: ${self:custom.SUBSCRIBERS_TABLE}

  unsubscribe:
    handler: src/unsubscribe.handler
    role: UnsubscribeRole
    events:
      - httpApi: 'DELETE /subscriber/{subscriberId}'
    environment:
      SUBSCRIBERS_TABLE: ${self:custom.SUBSCRIBERS_TABLE}


# The "Resources" your "Functions" use. Raw AWS CloudFormation goes in here.
resources:
  Resources:
    SubscribersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.SUBSCRIBERS_TABLE}
        AttributeDefinitions:
          - AttributeName: subscriberId
            AttributeType: S
        KeySchema:
          - AttributeName: subscriberId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    SubscribeRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /path/
        RoleName: 'SubscribeRole-${opt:stage, self:provider.stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SubscribeRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DescribeInstances
                    - ec2:AttachNetworkInterface
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - Fn::GetAtt: [SubscribersTable, Arn]

    UnsubscribeRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /path/
        RoleName: 'Unsubscribe-${opt:stage, self:provider.stage}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: UnsubscribeRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DescribeInstances
                    - ec2:AttachNetworkInterface
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource:
                    - Fn::GetAtt: [SubscribersTable, Arn]

      